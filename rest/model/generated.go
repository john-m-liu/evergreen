// Code generated by rest/model/codegen.go. DO NOT EDIT.

package model

import (
	"time"

	"github.com/evergreen-ci/evergreen/model/patch"
	"github.com/evergreen-ci/evergreen/model/task_annotations"
	"github.com/evergreen-ci/evergreen/model/user"
)

type APIAnnotationSource struct {
	Author *string    `json:"author"`
	Time   *time.Time `json:"time"`
}
type APIIssueLink struct {
	URL      *string `json:"url"`
	IssueKey *string `json:"issue_key"`
}
type APIDisplayTask struct {
	Name           *string  `json:"name"`
	ExecutionTasks []string `json:"execution_tasks"`
}
type APIDBUser struct {
	UserID      *string  `json:"user_id"`
	DisplayName *string  `json:"display_name"`
	OnlyApi     bool     `json:"only_api"`
	Roles       []string `json:"roles"`
}

// APIAnnotationSourceBuildFromService takes the task_annotations.AnnotationSource DB struct and
// returns the REST struct *APIAnnotationSource with the corresponding fields populated
func APIAnnotationSourceBuildFromService(t task_annotations.AnnotationSource) *APIAnnotationSource {
	m := APIAnnotationSource{}
	m.Author = StringStringPtr(t.Author)
	m.Time = TimeTimeTimeTimePtr(t.Time)
	return &m
}

// APIAnnotationSourceToService takes the APIAnnotationSource REST struct and returns the DB struct
// *task_annotations.AnnotationSource with the corresponding fields populated
func APIAnnotationSourceToService(m APIAnnotationSource) *task_annotations.AnnotationSource {
	out := &task_annotations.AnnotationSource{}
	out.Author = StringPtrString(m.Author)
	out.Time = TimeTimePtrTimeTime(m.Time)
	return out
}

// APIIssueLinkBuildFromService takes the task_annotations.IssueLink DB struct and
// returns the REST struct *APIIssueLink with the corresponding fields populated
func APIIssueLinkBuildFromService(t task_annotations.IssueLink) *APIIssueLink {
	m := APIIssueLink{}
	m.URL = StringStringPtr(t.URL)
	m.IssueKey = StringStringPtr(t.IssueKey)
	return &m
}

// APIIssueLinkToService takes the APIIssueLink REST struct and returns the DB struct
// *task_annotations.IssueLink with the corresponding fields populated
func APIIssueLinkToService(m APIIssueLink) *task_annotations.IssueLink {
	out := &task_annotations.IssueLink{}
	out.URL = StringPtrString(m.URL)
	out.IssueKey = StringPtrString(m.IssueKey)
	return out
}

// APIDisplayTaskBuildFromService takes the patch.DisplayTask DB struct and
// returns the REST struct *APIDisplayTask with the corresponding fields populated
func APIDisplayTaskBuildFromService(t patch.DisplayTask) *APIDisplayTask {
	m := APIDisplayTask{}
	m.ExecutionTasks = ArrstringArrstring(t.ExecTasks)
	m.Name = StringStringPtr(t.Name)
	return &m
}

// APIDisplayTaskToService takes the APIDisplayTask REST struct and returns the DB struct
// *patch.DisplayTask with the corresponding fields populated
func APIDisplayTaskToService(m APIDisplayTask) *patch.DisplayTask {
	out := &patch.DisplayTask{}
	out.ExecTasks = ArrstringArrstring(m.ExecutionTasks)
	out.Name = StringPtrString(m.Name)
	return out
}

// APIDBUserBuildFromService takes the user.DBUser DB struct and
// returns the REST struct *APIDBUser with the corresponding fields populated
func APIDBUserBuildFromService(t user.DBUser) *APIDBUser {
	m := APIDBUser{}
	m.DisplayName = StringStringPtr(t.DispName)
	m.Roles = ArrstringArrstring(t.SystemRoles)
	m.UserID = StringStringPtr(t.Id)
	m.OnlyApi = BoolBool(t.OnlyAPI)
	return &m
}

// APIDBUserToService takes the APIDBUser REST struct and returns the DB struct
// *user.DBUser with the corresponding fields populated
func APIDBUserToService(m APIDBUser) *user.DBUser {
	out := &user.DBUser{}
	out.DispName = StringPtrString(m.DisplayName)
	out.Id = StringPtrString(m.UserID)
	out.SystemRoles = ArrstringArrstring(m.Roles)
	out.OnlyAPI = BoolBool(m.OnlyApi)
	return out
}
